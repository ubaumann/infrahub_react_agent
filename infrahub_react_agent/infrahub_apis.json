{
    "openapi": "3.1.0",
    "info": {
      "title": "Infrahub",
      "version": "1.0.7"
    },
    "paths": {
      "/api/artifact/{artifact_id}": {
        "get": {
          "summary": "Get Artifact",
          "operationId": "get_artifact_api_artifact__artifact_id__get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "artifact_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Artifact Id"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            },
            {
              "name": "at",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Time to use for the query, in absolute or relative format",
                "title": "At"
              },
              "description": "Time to use for the query, in absolute or relative format"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/artifact/generate/{artifact_definition_id}": {
        "post": {
          "summary": "Generate Artifact",
          "operationId": "generate_artifact_api_artifact_generate__artifact_definition_id__post",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "artifact_definition_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Artifact Definition Id"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            },
            {
              "name": "at",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Time to use for the query, in absolute or relative format",
                "title": "At"
              },
              "description": "Time to use for the query, in absolute or relative format"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ArtifactGeneratePayload"
                    }
                  ],
                  "description": "Payload of the request, can be used to limit the scope of the query to a specific list of hosts",
                  "default": {
                    "nodes": [
                      
                    ]
                  },
                  "title": "Payload"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "null",
                    "title": "Response Generate Artifact Api Artifact Generate  Artifact Definition Id  Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/auth/login": {
        "post": {
          "summary": "Login User",
          "operationId": "login_user_api_auth_login_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordCredential"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserToken"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/auth/refresh": {
        "post": {
          "summary": "Refresh Jwt Token",
          "operationId": "refresh_jwt_token_api_auth_refresh_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessTokenResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "HTTPBearer": [
                
              ]
            }
          ]
        }
      },
      "/api/auth/logout": {
        "post": {
          "summary": "Logout",
          "operationId": "logout_api_auth_logout_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    
                  }
                }
              }
            }
          },
          "security": [
            {
              "HTTPBearer": [
                
              ]
            }
          ]
        }
      },
      "/api/diff/data": {
        "get": {
          "summary": "Get Diff Data",
          "operationId": "get_diff_data_api_diff_data_get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "time_from",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Time From"
              }
            },
            {
              "name": "time_to",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Time To"
              }
            },
            {
              "name": "branch_only",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Branch Only"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BranchDiff"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/diff/schema": {
        "get": {
          "summary": "Get Diff Schema",
          "operationId": "get_diff_schema_api_diff_schema_get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "time_from",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Time From"
              }
            },
            {
              "name": "time_to",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Time To"
              }
            },
            {
              "name": "branch_only",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Branch Only"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BranchDiff"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/diff/files": {
        "get": {
          "summary": "Get Diff Files",
          "operationId": "get_diff_files_api_diff_files_get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "time_from",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Time From"
              }
            },
            {
              "name": "time_to",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Time To"
              }
            },
            {
              "name": "branch_only",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Branch Only"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/components/schemas/BranchDiffRepository"
                      }
                    },
                    "title": "Response Get Diff Files Api Diff Files Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/diff/artifacts": {
        "get": {
          "summary": "Get Diff Artifacts",
          "operationId": "get_diff_artifacts_api_diff_artifacts_get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "time_from",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Time From"
              }
            },
            {
              "name": "time_to",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Time To"
              }
            },
            {
              "name": "branch_only",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Branch Only"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/BranchDiffArtifact"
                    },
                    "title": "Response Get Diff Artifacts Api Diff Artifacts Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/file/{repository_id}/{file_path}": {
        "get": {
          "summary": "Get File",
          "description": "Retrieve a file from a git repository.",
          "operationId": "get_file_api_file__repository_id___file_path__get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "repository_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Repository Id"
              }
            },
            {
              "name": "file_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "File Path"
              }
            },
            {
              "name": "commit",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Commit"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            },
            {
              "name": "at",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Time to use for the query, in absolute or relative format",
                "title": "At"
              },
              "description": "Time to use for the query, in absolute or relative format"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/config": {
        "get": {
          "summary": "Get Config",
          "operationId": "get_config_api_config_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConfigAPI"
                  }
                }
              }
            }
          }
        }
      },
      "/api/info": {
        "get": {
          "summary": "Get Info",
          "operationId": "get_info_api_info_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InfoAPI"
                  }
                }
              }
            }
          }
        }
      },
      "/api/menu": {
        "get": {
          "summary": "Get Menu",
          "operationId": "get_menu_api_menu_get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Menu"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/oauth2/{provider_name}/authorize": {
        "get": {
          "summary": "Authorize",
          "operationId": "authorize_api_oauth2__provider_name__authorize_get",
          "parameters": [
            {
              "name": "provider_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Provider Name"
              }
            },
            {
              "name": "final_url",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Final Url"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/oauth2/{provider_name}/token": {
        "get": {
          "summary": "Token",
          "operationId": "token_api_oauth2__provider_name__token_get",
          "parameters": [
            {
              "name": "provider_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Provider Name"
              }
            },
            {
              "name": "state",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "State"
              }
            },
            {
              "name": "code",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Code"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserTokenWithUrl"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/oidc/{provider_name}/authorize": {
        "get": {
          "summary": "Authorize",
          "operationId": "authorize_api_oidc__provider_name__authorize_get",
          "parameters": [
            {
              "name": "provider_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Provider Name"
              }
            },
            {
              "name": "final_url",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Final Url"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/oidc/{provider_name}/token": {
        "get": {
          "summary": "Token",
          "operationId": "token_api_oidc__provider_name__token_get",
          "parameters": [
            {
              "name": "provider_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Provider Name"
              }
            },
            {
              "name": "state",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "State"
              }
            },
            {
              "name": "code",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Code"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserTokenWithUrl"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/query/{query_id}": {
        "post": {
          "summary": "Graphql Query Post",
          "operationId": "graphql_query_post_api_query__query_id__post",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "query_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "ID or Name of the GraphQL query to execute",
                "title": "Query Id"
              },
              "description": "ID or Name of the GraphQL query to execute"
            },
            {
              "name": "subscribers",
              "in": "query",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of subscribers to attach to the CoreGraphQLQueryGroup",
                "default": [
                  
                ],
                "title": "Subscribers"
              },
              "description": "List of subscribers to attach to the CoreGraphQLQueryGroup"
            },
            {
              "name": "update_group",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "description": "When True create or update a CoreGraphQLQueryGroup with all nodes related to this query.",
                "default": false,
                "title": "Update Group"
              },
              "description": "When True create or update a CoreGraphQLQueryGroup with all nodes related to this query."
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            },
            {
              "name": "at",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Time to use for the query, in absolute or relative format",
                "title": "At"
              },
              "description": "Time to use for the query, in absolute or relative format"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/QueryPayload"
                    }
                  ],
                  "description": "Payload of the request, must be used to provide the variables",
                  "default": {
                    "variables": {
                      
                    }
                  },
                  "title": "Payload"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "title": "Response Graphql Query Post Api Query  Query Id  Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "summary": "Graphql Query Get",
          "operationId": "graphql_query_get_api_query__query_id__get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "query_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "ID or Name of the GraphQL query to execute",
                "title": "Query Id"
              },
              "description": "ID or Name of the GraphQL query to execute"
            },
            {
              "name": "subscribers",
              "in": "query",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of subscribers to attach to the CoreGraphQLQueryGroup",
                "default": [
                  
                ],
                "title": "Subscribers"
              },
              "description": "List of subscribers to attach to the CoreGraphQLQueryGroup"
            },
            {
              "name": "update_group",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "description": "When True create or update a CoreGraphQLQueryGroup with all nodes related to this query.",
                "default": false,
                "title": "Update Group"
              },
              "description": "When True create or update a CoreGraphQLQueryGroup with all nodes related to this query."
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            },
            {
              "name": "at",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Time to use for the query, in absolute or relative format",
                "title": "At"
              },
              "description": "Time to use for the query, in absolute or relative format"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "title": "Response Graphql Query Get Api Query  Query Id  Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/schema": {
        "get": {
          "summary": "Get Schema",
          "operationId": "get_schema_api_schema_get",
          "parameters": [
            {
              "name": "namespaces",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Namespaces"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaReadAPI"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/schema/summary": {
        "get": {
          "summary": "Get Schema Summary",
          "operationId": "get_schema_summary_api_schema_summary_get",
          "parameters": [
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaBranchHash"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/schema/{schema_kind}": {
        "get": {
          "summary": "Get Schema By Kind",
          "operationId": "get_schema_by_kind_api_schema__schema_kind__get",
          "parameters": [
            {
              "name": "schema_kind",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Schema Kind"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/APIProfileSchema"
                      },
                      {
                        "$ref": "#/components/schemas/APINodeSchema"
                      },
                      {
                        "$ref": "#/components/schemas/APIGenericSchema"
                      }
                    ],
                    "title": "Response Get Schema By Kind Api Schema  Schema Kind  Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/schema/json_schema/{schema_kind}": {
        "get": {
          "summary": "Get Json Schema By Kind",
          "operationId": "get_json_schema_by_kind_api_schema_json_schema__schema_kind__get",
          "parameters": [
            {
              "name": "schema_kind",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Schema Kind"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JSONSchema"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/schema/load": {
        "post": {
          "summary": "Load Schema",
          "operationId": "load_schema_api_schema_load_post",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemasLoadAPI"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaUpdate"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/schema/check": {
        "post": {
          "summary": "Check Schema",
          "operationId": "check_schema_api_schema_check_post",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemasLoadAPI"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/storage/object/{identifier}": {
        "get": {
          "summary": "Get File",
          "operationId": "get_file_api_storage_object__identifier__get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "identifier",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Identifier"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/storage/upload/content": {
        "post": {
          "summary": "Upload Content",
          "operationId": "upload_content_api_storage_upload_content_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadContentPayload"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UploadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ]
        }
      },
      "/api/storage/upload/file": {
        "post": {
          "summary": "Upload File",
          "operationId": "upload_file_api_storage_upload_file_post",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_upload_file_api_storage_upload_file_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UploadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ]
        }
      },
      "/api/transform/python/{transform_id}": {
        "get": {
          "summary": "Transform Python",
          "operationId": "transform_python_api_transform_python__transform_id__get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "transform_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Transform Id"
              }
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            },
            {
              "name": "at",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Time to use for the query, in absolute or relative format",
                "title": "At"
              },
              "description": "Time to use for the query, in absolute or relative format"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/api/transform/jinja2/{transform_id}": {
        "get": {
          "summary": "Transform Jinja2",
          "operationId": "transform_jinja2_api_transform_jinja2__transform_id__get",
          "security": [
            {
              "HTTPBearer": [
                
              ]
            },
            {
              "APIKeyHeader": [
                
              ]
            }
          ],
          "parameters": [
            {
              "name": "transform_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "ID or Name of the Jinja2 Transform to render",
                "title": "Transform Id"
              },
              "description": "ID or Name of the Jinja2 Transform to render"
            },
            {
              "name": "branch",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Name of the branch to use for the query",
                "title": "Branch"
              },
              "description": "Name of the branch to use for the query"
            },
            {
              "name": "at",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Time to use for the query, in absolute or relative format",
                "title": "At"
              },
              "description": "Time to use for the query, in absolute or relative format"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "APIGenericSchema": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The ID of the node",
              "update": "not_applicable"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "description": "Expected state of the node/generic after loading the schema",
              "default": "present",
              "update": "not_applicable"
            },
            "name": {
              "type": "string",
              "maxLength": 32,
              "minLength": 2,
              "pattern": "^[A-Z][a-zA-Z0-9]+$",
              "title": "Name",
              "description": "Node name, must be unique within a namespace and must start with an uppercase letter.",
              "update": "migration_required"
            },
            "namespace": {
              "type": "string",
              "maxLength": 32,
              "minLength": 3,
              "pattern": "^[A-Z][a-z0-9]+$",
              "title": "Namespace",
              "description": "Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.",
              "update": "migration_required"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Short description of the model, will be visible in the frontend.",
              "update": "allowed"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 64
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Human friendly representation of the name/kind",
              "update": "allowed"
            },
            "branch": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BranchSupportType"
                }
              ],
              "description": "Type of branch support for the model.",
              "default": "aware",
              "update": "not_supported"
            },
            "default_filter": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-z0-9\\_]+$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Default Filter",
              "description": "Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)",
              "update": "allowed"
            },
            "human_friendly_id": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Human Friendly Id",
              "description": "Human friendly and unique identifier for the object.",
              "update": "allowed"
            },
            "display_labels": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Labels",
              "description": "List of attributes to use to generate the display label",
              "update": "allowed"
            },
            "include_in_menu": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include In Menu",
              "description": "Defines if objects of this kind should be included in the menu.",
              "update": "allowed"
            },
            "menu_placement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Menu Placement",
              "description": "Defines where in the menu this object should be placed.",
              "update": "allowed"
            },
            "icon": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Icon",
              "description": "Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/",
              "update": "allowed"
            },
            "order_by": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By",
              "description": "List of attributes to use to order the results by default",
              "update": "allowed"
            },
            "uniqueness_constraints": {
              "anyOf": [
                {
                  "items": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Uniqueness Constraints",
              "description": "List of multi-element uniqueness constraints that can combine relationships and attributes",
              "update": "validate_constraint"
            },
            "documentation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Documentation",
              "description": "Link to a documentation associated with this object, can be internal or external.",
              "update": "allowed"
            },
            "attributes": {
              "items": {
                "$ref": "#/components/schemas/AttributeSchema-Output"
              },
              "type": "array",
              "title": "Attributes",
              "description": "Node attributes",
              "update": "not_applicable"
            },
            "relationships": {
              "items": {
                "$ref": "#/components/schemas/RelationshipSchema"
              },
              "type": "array",
              "title": "Relationships",
              "description": "Node Relationships",
              "update": "not_applicable"
            },
            "hierarchical": {
              "type": "boolean",
              "title": "Hierarchical",
              "description": "Defines if the Generic support the hierarchical mode.",
              "default": false,
              "update": "validate_constraint"
            },
            "generate_profile": {
              "type": "boolean",
              "title": "Generate Profile",
              "description": "Indicate if a profile schema should be generated for this schema",
              "default": true,
              "update": "validate_constraint"
            },
            "used_by": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Used By",
              "description": "List of Nodes that are referencing this Generic",
              "update": "not_applicable"
            },
            "kind": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Kind"
            },
            "hash": {
              "type": "string",
              "title": "Hash"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name",
            "namespace",
            "hash"
          ],
          "title": "APIGenericSchema"
        },
        "APINodeSchema": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The ID of the node",
              "update": "not_applicable"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "description": "Expected state of the node/generic after loading the schema",
              "default": "present",
              "update": "not_applicable"
            },
            "name": {
              "type": "string",
              "maxLength": 32,
              "minLength": 2,
              "pattern": "^[A-Z][a-zA-Z0-9]+$",
              "title": "Name",
              "description": "Node name, must be unique within a namespace and must start with an uppercase letter.",
              "update": "migration_required"
            },
            "namespace": {
              "type": "string",
              "maxLength": 32,
              "minLength": 3,
              "pattern": "^[A-Z][a-z0-9]+$",
              "title": "Namespace",
              "description": "Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.",
              "update": "migration_required"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Short description of the model, will be visible in the frontend.",
              "update": "allowed"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 64
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Human friendly representation of the name/kind",
              "update": "allowed"
            },
            "branch": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BranchSupportType"
                }
              ],
              "description": "Type of branch support for the model.",
              "default": "aware",
              "update": "not_supported"
            },
            "default_filter": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-z0-9\\_]+$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Default Filter",
              "description": "Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)",
              "update": "allowed"
            },
            "human_friendly_id": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Human Friendly Id",
              "description": "Human friendly and unique identifier for the object.",
              "update": "allowed"
            },
            "display_labels": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Labels",
              "description": "List of attributes to use to generate the display label",
              "update": "allowed"
            },
            "include_in_menu": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include In Menu",
              "description": "Defines if objects of this kind should be included in the menu.",
              "update": "allowed"
            },
            "menu_placement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Menu Placement",
              "description": "Defines where in the menu this object should be placed.",
              "update": "allowed"
            },
            "icon": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Icon",
              "description": "Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/",
              "update": "allowed"
            },
            "order_by": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By",
              "description": "List of attributes to use to order the results by default",
              "update": "allowed"
            },
            "uniqueness_constraints": {
              "anyOf": [
                {
                  "items": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Uniqueness Constraints",
              "description": "List of multi-element uniqueness constraints that can combine relationships and attributes",
              "update": "validate_constraint"
            },
            "documentation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Documentation",
              "description": "Link to a documentation associated with this object, can be internal or external.",
              "update": "allowed"
            },
            "attributes": {
              "items": {
                "$ref": "#/components/schemas/AttributeSchema-Output"
              },
              "type": "array",
              "title": "Attributes",
              "description": "Node attributes",
              "update": "not_applicable"
            },
            "relationships": {
              "items": {
                "$ref": "#/components/schemas/RelationshipSchema"
              },
              "type": "array",
              "title": "Relationships",
              "description": "Node Relationships",
              "update": "not_applicable"
            },
            "inherit_from": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Inherit From",
              "description": "List of Generic Kind that this node is inheriting from",
              "update": "validate_constraint"
            },
            "generate_profile": {
              "type": "boolean",
              "title": "Generate Profile",
              "description": "Indicate if a profile schema should be generated for this schema",
              "default": true,
              "update": "validate_constraint"
            },
            "hierarchy": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Hierarchy",
              "description": "Internal value to track the name of the Hierarchy, must match the name of a Generic supporting hierarchical mode",
              "update": "validate_constraint"
            },
            "parent": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Parent",
              "description": "Expected Kind for the parent node in a Hierarchy, default to the main generic defined if not defined.",
              "update": "validate_constraint"
            },
            "children": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Children",
              "description": "Expected Kind for the children nodes in a Hierarchy, default to the main generic defined if not defined.",
              "update": "validate_constraint"
            },
            "kind": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Kind"
            },
            "hash": {
              "type": "string",
              "title": "Hash"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name",
            "namespace",
            "hash"
          ],
          "title": "APINodeSchema"
        },
        "APIProfileSchema": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The ID of the node",
              "update": "not_applicable"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "description": "Expected state of the node/generic after loading the schema",
              "default": "present",
              "update": "not_applicable"
            },
            "name": {
              "type": "string",
              "maxLength": 32,
              "minLength": 2,
              "pattern": "^[A-Z][a-zA-Z0-9]+$",
              "title": "Name",
              "description": "Node name, must be unique within a namespace and must start with an uppercase letter.",
              "update": "migration_required"
            },
            "namespace": {
              "type": "string",
              "maxLength": 32,
              "minLength": 3,
              "pattern": "^[A-Z][a-z0-9]+$",
              "title": "Namespace",
              "description": "Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.",
              "update": "migration_required"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Short description of the model, will be visible in the frontend.",
              "update": "allowed"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 64
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Human friendly representation of the name/kind",
              "update": "allowed"
            },
            "branch": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BranchSupportType"
                }
              ],
              "description": "Type of branch support for the model.",
              "default": "aware",
              "update": "not_supported"
            },
            "default_filter": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-z0-9\\_]+$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Default Filter",
              "description": "Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)",
              "update": "allowed"
            },
            "human_friendly_id": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Human Friendly Id",
              "description": "Human friendly and unique identifier for the object.",
              "update": "allowed"
            },
            "display_labels": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Labels",
              "description": "List of attributes to use to generate the display label",
              "update": "allowed"
            },
            "include_in_menu": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include In Menu",
              "description": "Defines if objects of this kind should be included in the menu.",
              "update": "allowed"
            },
            "menu_placement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Menu Placement",
              "description": "Defines where in the menu this object should be placed.",
              "update": "allowed"
            },
            "icon": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Icon",
              "description": "Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/",
              "update": "allowed"
            },
            "order_by": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By",
              "description": "List of attributes to use to order the results by default",
              "update": "allowed"
            },
            "uniqueness_constraints": {
              "anyOf": [
                {
                  "items": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Uniqueness Constraints",
              "description": "List of multi-element uniqueness constraints that can combine relationships and attributes",
              "update": "validate_constraint"
            },
            "documentation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Documentation",
              "description": "Link to a documentation associated with this object, can be internal or external.",
              "update": "allowed"
            },
            "attributes": {
              "items": {
                "$ref": "#/components/schemas/AttributeSchema-Output"
              },
              "type": "array",
              "title": "Attributes",
              "description": "Node attributes",
              "update": "not_applicable"
            },
            "relationships": {
              "items": {
                "$ref": "#/components/schemas/RelationshipSchema"
              },
              "type": "array",
              "title": "Relationships",
              "description": "Node Relationships",
              "update": "not_applicable"
            },
            "inherit_from": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Inherit From",
              "description": "List of Generic Kind that this profile is inheriting from"
            },
            "kind": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Kind"
            },
            "hash": {
              "type": "string",
              "title": "Hash"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name",
            "namespace",
            "hash"
          ],
          "title": "APIProfileSchema"
        },
        "AccessTokenResponse": {
          "properties": {
            "access_token": {
              "type": "string",
              "title": "Access Token",
              "description": "JWT access_token"
            }
          },
          "type": "object",
          "required": [
            "access_token"
          ],
          "title": "AccessTokenResponse"
        },
        "AllowOverrideType": {
          "type": "string",
          "enum": [
            "none",
            "any"
          ],
          "title": "AllowOverrideType"
        },
        "AnalyticsSettings": {
          "properties": {
            "enable": {
              "type": "boolean",
              "title": "Enable",
              "default": true
            },
            "address": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Address"
            },
            "api_key": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Api Key"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "AnalyticsSettings"
        },
        "ArtifactGeneratePayload": {
          "properties": {
            "nodes": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Nodes"
            }
          },
          "type": "object",
          "title": "ArtifactGeneratePayload"
        },
        "ArtifactTarget": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "kind": {
              "type": "string",
              "title": "Kind"
            },
            "display_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Label"
            }
          },
          "type": "object",
          "required": [
            "id",
            "kind"
          ],
          "title": "ArtifactTarget"
        },
        "AttributeSchema-Input": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The ID of the attribute",
              "update": "not_applicable"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "description": "Expected state of the attribute after loading the schema",
              "default": "present",
              "update": "not_applicable"
            },
            "name": {
              "type": "string",
              "maxLength": 32,
              "minLength": 3,
              "pattern": "^[a-z0-9\\_]+$",
              "title": "Name",
              "description": "Attribute name, must be unique within a model and must be all lowercase.",
              "update": "migration_required"
            },
            "kind": {
              "type": "string",
              "title": "Kind",
              "description": "Defines the type of the attribute.",
              "update": "validate_constraint"
            },
            "enum": {
              "anyOf": [
                {
                  "items": {
                    
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Enum",
              "description": "Define a list of valid values for the attribute.",
              "update": "validate_constraint"
            },
            "choices": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/DropdownChoice"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Choices",
              "description": "Define a list of valid choices for a dropdown attribute.",
              "update": "validate_constraint"
            },
            "regex": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Regex",
              "description": "Regex uses to limit the characters allowed in for the attributes.",
              "update": "validate_constraint"
            },
            "max_length": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Length",
              "description": "Set a maximum number of characters allowed for a given attribute.",
              "update": "validate_constraint"
            },
            "min_length": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Length",
              "description": "Set a minimum number of characters allowed for a given attribute.",
              "update": "validate_constraint"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 32
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Human friendly representation of the name. Will be autogenerated if not provided",
              "update": "allowed"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Short description of the attribute.",
              "update": "allowed"
            },
            "read_only": {
              "type": "boolean",
              "title": "Read Only",
              "description": "Set the attribute as Read-Only, users won't be able to change its value. Mainly relevant for internal object.",
              "default": false,
              "update": "allowed"
            },
            "unique": {
              "type": "boolean",
              "title": "Unique",
              "description": "Indicate if the value of this attribute must be unique in the database for a given model.",
              "default": false,
              "update": "validate_constraint"
            },
            "optional": {
              "type": "boolean",
              "title": "Optional",
              "description": "Indicate if this attribute is mandatory or optional.",
              "default": false,
              "update": "validate_constraint"
            },
            "branch": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchSupportType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Type of branch support for the attribute, if not defined it will be inherited from the node.",
              "update": "not_supported"
            },
            "order_weight": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Weight",
              "description": "Number used to order the attribute in the frontend (table and view). Lowest value will be ordered first.",
              "update": "allowed"
            },
            "default_value": {
              "anyOf": [
                {
                  
                },
                {
                  "type": "null"
                }
              ],
              "title": "Default Value",
              "description": "Default value of the attribute.",
              "update": "allowed"
            },
            "inherited": {
              "type": "boolean",
              "title": "Inherited",
              "description": "Internal value to indicate if the attribute was inherited from a Generic node.",
              "default": false,
              "update": "not_applicable"
            },
            "allow_override": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AllowOverrideType"
                }
              ],
              "description": "Type of allowed override for the attribute.",
              "default": "any",
              "update": "allowed"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name",
            "kind"
          ],
          "title": "AttributeSchema"
        },
        "AttributeSchema-Output": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The ID of the attribute",
              "update": "not_applicable"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "description": "Expected state of the attribute after loading the schema",
              "default": "present",
              "update": "not_applicable"
            },
            "name": {
              "type": "string",
              "maxLength": 32,
              "minLength": 3,
              "pattern": "^[a-z0-9\\_]+$",
              "title": "Name",
              "description": "Attribute name, must be unique within a model and must be all lowercase.",
              "update": "migration_required"
            },
            "kind": {
              "type": "string",
              "title": "Kind",
              "description": "Defines the type of the attribute.",
              "update": "validate_constraint"
            },
            "enum": {
              "anyOf": [
                {
                  "items": {
                    
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Enum",
              "description": "Define a list of valid values for the attribute.",
              "update": "validate_constraint"
            },
            "choices": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/DropdownChoice"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Choices",
              "description": "Define a list of valid choices for a dropdown attribute.",
              "update": "validate_constraint"
            },
            "regex": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Regex",
              "description": "Regex uses to limit the characters allowed in for the attributes.",
              "update": "validate_constraint"
            },
            "max_length": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Length",
              "description": "Set a maximum number of characters allowed for a given attribute.",
              "update": "validate_constraint"
            },
            "min_length": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Length",
              "description": "Set a minimum number of characters allowed for a given attribute.",
              "update": "validate_constraint"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 32
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Human friendly representation of the name. Will be autogenerated if not provided",
              "update": "allowed"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Short description of the attribute.",
              "update": "allowed"
            },
            "read_only": {
              "type": "boolean",
              "title": "Read Only",
              "description": "Set the attribute as Read-Only, users won't be able to change its value. Mainly relevant for internal object.",
              "default": false,
              "update": "allowed"
            },
            "unique": {
              "type": "boolean",
              "title": "Unique",
              "description": "Indicate if the value of this attribute must be unique in the database for a given model.",
              "default": false,
              "update": "validate_constraint"
            },
            "optional": {
              "type": "boolean",
              "title": "Optional",
              "description": "Indicate if this attribute is mandatory or optional.",
              "default": false,
              "update": "validate_constraint"
            },
            "branch": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchSupportType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Type of branch support for the attribute, if not defined it will be inherited from the node.",
              "update": "not_supported"
            },
            "order_weight": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Weight",
              "description": "Number used to order the attribute in the frontend (table and view). Lowest value will be ordered first.",
              "update": "allowed"
            },
            "default_value": {
              "anyOf": [
                {
                  
                },
                {
                  "type": "null"
                }
              ],
              "title": "Default Value",
              "description": "Default value of the attribute.",
              "update": "allowed"
            },
            "inherited": {
              "type": "boolean",
              "title": "Inherited",
              "description": "Internal value to indicate if the attribute was inherited from a Generic node.",
              "default": false,
              "update": "not_applicable"
            },
            "allow_override": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AllowOverrideType"
                }
              ],
              "description": "Type of allowed override for the attribute.",
              "default": "any",
              "update": "allowed"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name",
            "kind"
          ],
          "title": "AttributeSchema"
        },
        "Body_upload_file_api_storage_upload_file_post": {
          "properties": {
            "file": {
              "type": "string",
              "format": "binary",
              "title": "File"
            }
          },
          "type": "object",
          "required": [
            "file"
          ],
          "title": "Body_upload_file_api_storage_upload_file_post"
        },
        "BranchDiff": {
          "properties": {
            "diffs": {
              "items": {
                "$ref": "#/components/schemas/BranchDiffEntry"
              },
              "type": "array",
              "title": "Diffs"
            }
          },
          "type": "object",
          "title": "BranchDiff"
        },
        "BranchDiffArtifact": {
          "properties": {
            "branch": {
              "type": "string",
              "title": "Branch"
            },
            "id": {
              "type": "string",
              "title": "Id"
            },
            "display_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Label"
            },
            "action": {
              "$ref": "#/components/schemas/DiffAction"
            },
            "target": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ArtifactTarget"
                },
                {
                  "type": "null"
                }
              ]
            },
            "item_new": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchDiffArtifactStorage"
                },
                {
                  "type": "null"
                }
              ]
            },
            "item_previous": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchDiffArtifactStorage"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "branch",
            "id",
            "action"
          ],
          "title": "BranchDiffArtifact"
        },
        "BranchDiffArtifactStorage": {
          "properties": {
            "storage_id": {
              "type": "string",
              "title": "Storage Id"
            },
            "checksum": {
              "type": "string",
              "title": "Checksum"
            }
          },
          "type": "object",
          "required": [
            "storage_id",
            "checksum"
          ],
          "title": "BranchDiffArtifactStorage"
        },
        "BranchDiffElement": {
          "properties": {
            "type": {
              "$ref": "#/components/schemas/DiffElementType"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "path": {
              "type": "string",
              "title": "Path"
            },
            "change": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchDiffElementAttribute"
                },
                {
                  "$ref": "#/components/schemas/BranchDiffElementRelationshipOne"
                },
                {
                  "$ref": "#/components/schemas/BranchDiffElementRelationshipMany"
                }
              ],
              "title": "Change"
            }
          },
          "type": "object",
          "required": [
            "type",
            "name",
            "path",
            "change"
          ],
          "title": "BranchDiffElement"
        },
        "BranchDiffElementAttribute": {
          "properties": {
            "type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DiffElementType"
                }
              ],
              "default": "Attribute"
            },
            "branches": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Branches"
            },
            "id": {
              "type": "string",
              "title": "Id",
              "default": ""
            },
            "summary": {
              "$ref": "#/components/schemas/DiffSummary"
            },
            "action": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DiffAction"
                }
              ],
              "default": "unchanged"
            },
            "value": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchDiffPropertyCollection"
                },
                {
                  "type": "null"
                }
              ]
            },
            "properties": {
              "additionalProperties": {
                "$ref": "#/components/schemas/BranchDiffPropertyCollection"
              },
              "type": "object",
              "title": "Properties"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "BranchDiffElementAttribute"
        },
        "BranchDiffElementRelationshipMany": {
          "properties": {
            "type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DiffElementType"
                }
              ],
              "default": "RelationshipMany"
            },
            "identifier": {
              "type": "string",
              "title": "Identifier",
              "default": ""
            },
            "branches": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true,
              "title": "Branches"
            },
            "summary": {
              "$ref": "#/components/schemas/DiffSummary"
            },
            "peers": {
              "additionalProperties": {
                "$ref": "#/components/schemas/BranchDiffElementRelationshipManyPeer"
              },
              "type": "object",
              "title": "Peers"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "BranchDiffElementRelationshipMany"
        },
        "BranchDiffElementRelationshipManyPeer": {
          "properties": {
            "branches": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true,
              "title": "Branches"
            },
            "peer": {
              "$ref": "#/components/schemas/BranchDiffRelationshipPeerNode"
            },
            "path": {
              "type": "string",
              "title": "Path"
            },
            "properties": {
              "additionalProperties": {
                "$ref": "#/components/schemas/BranchDiffPropertyCollection"
              },
              "type": "object",
              "title": "Properties"
            },
            "changed_at": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Changed At"
            },
            "action": {
              "additionalProperties": {
                "$ref": "#/components/schemas/DiffAction"
              },
              "type": "object",
              "title": "Action"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "peer",
            "path"
          ],
          "title": "BranchDiffElementRelationshipManyPeer"
        },
        "BranchDiffElementRelationshipOne": {
          "properties": {
            "type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DiffElementType"
                }
              ],
              "default": "RelationshipOne"
            },
            "id": {
              "type": "string",
              "title": "Id",
              "default": ""
            },
            "identifier": {
              "type": "string",
              "title": "Identifier",
              "default": ""
            },
            "branches": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Branches"
            },
            "summary": {
              "$ref": "#/components/schemas/DiffSummary"
            },
            "peer": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchDiffRelationshipOnePeerCollection"
                },
                {
                  "type": "null"
                }
              ]
            },
            "properties": {
              "additionalProperties": {
                "$ref": "#/components/schemas/BranchDiffPropertyCollection"
              },
              "type": "object",
              "title": "Properties"
            },
            "changed_at": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Changed At"
            },
            "action": {
              "additionalProperties": {
                "$ref": "#/components/schemas/DiffAction"
              },
              "type": "object",
              "title": "Action"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "BranchDiffElementRelationshipOne"
        },
        "BranchDiffEntry": {
          "properties": {
            "kind": {
              "type": "string",
              "title": "Kind"
            },
            "id": {
              "type": "string",
              "title": "Id"
            },
            "path": {
              "type": "string",
              "title": "Path"
            },
            "elements": {
              "additionalProperties": {
                "$ref": "#/components/schemas/BranchDiffElement"
              },
              "type": "object",
              "title": "Elements"
            },
            "summary": {
              "$ref": "#/components/schemas/DiffSummary"
            },
            "action": {
              "additionalProperties": {
                "$ref": "#/components/schemas/DiffAction"
              },
              "type": "object",
              "title": "Action"
            },
            "display_label": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Display Label"
            }
          },
          "type": "object",
          "required": [
            "kind",
            "id",
            "path"
          ],
          "title": "BranchDiffEntry"
        },
        "BranchDiffFile": {
          "properties": {
            "branch": {
              "type": "string",
              "title": "Branch"
            },
            "location": {
              "type": "string",
              "title": "Location"
            },
            "action": {
              "$ref": "#/components/schemas/DiffAction"
            }
          },
          "type": "object",
          "required": [
            "branch",
            "location",
            "action"
          ],
          "title": "BranchDiffFile"
        },
        "BranchDiffProperty": {
          "properties": {
            "branch": {
              "type": "string",
              "title": "Branch"
            },
            "type": {
              "type": "string",
              "title": "Type"
            },
            "changed_at": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Changed At"
            },
            "action": {
              "$ref": "#/components/schemas/DiffAction"
            },
            "value": {
              "$ref": "#/components/schemas/BranchDiffPropertyValue"
            }
          },
          "type": "object",
          "required": [
            "branch",
            "type",
            "action",
            "value"
          ],
          "title": "BranchDiffProperty"
        },
        "BranchDiffPropertyCollection": {
          "properties": {
            "path": {
              "type": "string",
              "title": "Path"
            },
            "changes": {
              "items": {
                "$ref": "#/components/schemas/BranchDiffProperty"
              },
              "type": "array",
              "title": "Changes"
            }
          },
          "type": "object",
          "required": [
            "path"
          ],
          "title": "BranchDiffPropertyCollection"
        },
        "BranchDiffPropertyValue": {
          "properties": {
            "new": {
              "title": "New"
            },
            "previous": {
              "title": "Previous"
            }
          },
          "type": "object",
          "title": "BranchDiffPropertyValue"
        },
        "BranchDiffRelationshipOnePeer": {
          "properties": {
            "branch": {
              "type": "string",
              "title": "Branch"
            },
            "new": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchDiffRelationshipPeerNode"
                },
                {
                  "type": "null"
                }
              ]
            },
            "previous": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchDiffRelationshipPeerNode"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "branch"
          ],
          "title": "BranchDiffRelationshipOnePeer"
        },
        "BranchDiffRelationshipOnePeerCollection": {
          "properties": {
            "path": {
              "type": "string",
              "title": "Path"
            },
            "changes": {
              "items": {
                "$ref": "#/components/schemas/BranchDiffRelationshipOnePeer"
              },
              "type": "array",
              "title": "Changes"
            }
          },
          "type": "object",
          "required": [
            "path"
          ],
          "title": "BranchDiffRelationshipOnePeerCollection"
        },
        "BranchDiffRelationshipPeerNode": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "kind": {
              "type": "string",
              "title": "Kind"
            },
            "display_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Label"
            }
          },
          "type": "object",
          "required": [
            "id",
            "kind"
          ],
          "title": "BranchDiffRelationshipPeerNode"
        },
        "BranchDiffRepository": {
          "properties": {
            "branch": {
              "type": "string",
              "title": "Branch"
            },
            "id": {
              "type": "string",
              "title": "Id"
            },
            "display_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Name"
            },
            "commit_from": {
              "type": "string",
              "title": "Commit From"
            },
            "commit_to": {
              "type": "string",
              "title": "Commit To"
            },
            "files": {
              "items": {
                "$ref": "#/components/schemas/BranchDiffFile"
              },
              "type": "array",
              "title": "Files"
            }
          },
          "type": "object",
          "required": [
            "branch",
            "id",
            "commit_from",
            "commit_to"
          ],
          "title": "BranchDiffRepository"
        },
        "BranchSupportType": {
          "type": "string",
          "enum": [
            "aware",
            "agnostic",
            "local"
          ],
          "title": "BranchSupportType"
        },
        "ConfigAPI": {
          "properties": {
            "main": {
              "$ref": "#/components/schemas/MainSettings"
            },
            "logging": {
              "$ref": "#/components/schemas/LoggingSettings"
            },
            "analytics": {
              "$ref": "#/components/schemas/AnalyticsSettings"
            },
            "experimental_features": {
              "$ref": "#/components/schemas/ExperimentalFeaturesSettings"
            },
            "sso": {
              "$ref": "#/components/schemas/SSOInfo"
            }
          },
          "type": "object",
          "required": [
            "main",
            "logging",
            "analytics",
            "experimental_features",
            "sso"
          ],
          "title": "ConfigAPI"
        },
        "DiffAction": {
          "type": "string",
          "enum": [
            "added",
            "removed",
            "updated",
            "unchanged"
          ],
          "title": "DiffAction"
        },
        "DiffElementType": {
          "type": "string",
          "enum": [
            "Attribute",
            "RelationshipOne",
            "RelationshipMany"
          ],
          "title": "DiffElementType"
        },
        "DiffSummary": {
          "properties": {
            "added": {
              "type": "integer",
              "title": "Added",
              "default": 0
            },
            "removed": {
              "type": "integer",
              "title": "Removed",
              "default": 0
            },
            "updated": {
              "type": "integer",
              "title": "Updated",
              "default": 0
            }
          },
          "type": "object",
          "title": "DiffSummary"
        },
        "DropdownChoice": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "default": "present"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "color": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Color"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name"
          ],
          "title": "DropdownChoice"
        },
        "ExperimentalFeaturesSettings": {
          "properties": {
            "pull_request": {
              "type": "boolean",
              "title": "Pull Request",
              "default": false
            },
            "graphql_enums": {
              "type": "boolean",
              "title": "Graphql Enums",
              "default": false
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "ExperimentalFeaturesSettings"
        },
        "GenericSchema": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The ID of the node",
              "update": "not_applicable"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "description": "Expected state of the node/generic after loading the schema",
              "default": "present",
              "update": "not_applicable"
            },
            "name": {
              "type": "string",
              "maxLength": 32,
              "minLength": 2,
              "pattern": "^[A-Z][a-zA-Z0-9]+$",
              "title": "Name",
              "description": "Node name, must be unique within a namespace and must start with an uppercase letter.",
              "update": "migration_required"
            },
            "namespace": {
              "type": "string",
              "maxLength": 32,
              "minLength": 3,
              "pattern": "^[A-Z][a-z0-9]+$",
              "title": "Namespace",
              "description": "Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.",
              "update": "migration_required"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Short description of the model, will be visible in the frontend.",
              "update": "allowed"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 64
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Human friendly representation of the name/kind",
              "update": "allowed"
            },
            "branch": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BranchSupportType"
                }
              ],
              "description": "Type of branch support for the model.",
              "default": "aware",
              "update": "not_supported"
            },
            "default_filter": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-z0-9\\_]+$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Default Filter",
              "description": "Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)",
              "update": "allowed"
            },
            "human_friendly_id": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Human Friendly Id",
              "description": "Human friendly and unique identifier for the object.",
              "update": "allowed"
            },
            "display_labels": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Labels",
              "description": "List of attributes to use to generate the display label",
              "update": "allowed"
            },
            "include_in_menu": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include In Menu",
              "description": "Defines if objects of this kind should be included in the menu.",
              "update": "allowed"
            },
            "menu_placement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Menu Placement",
              "description": "Defines where in the menu this object should be placed.",
              "update": "allowed"
            },
            "icon": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Icon",
              "description": "Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/",
              "update": "allowed"
            },
            "order_by": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By",
              "description": "List of attributes to use to order the results by default",
              "update": "allowed"
            },
            "uniqueness_constraints": {
              "anyOf": [
                {
                  "items": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Uniqueness Constraints",
              "description": "List of multi-element uniqueness constraints that can combine relationships and attributes",
              "update": "validate_constraint"
            },
            "documentation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Documentation",
              "description": "Link to a documentation associated with this object, can be internal or external.",
              "update": "allowed"
            },
            "attributes": {
              "items": {
                "$ref": "#/components/schemas/AttributeSchema-Input"
              },
              "type": "array",
              "title": "Attributes",
              "description": "Node attributes",
              "update": "not_applicable"
            },
            "relationships": {
              "items": {
                "$ref": "#/components/schemas/RelationshipSchema"
              },
              "type": "array",
              "title": "Relationships",
              "description": "Node Relationships",
              "update": "not_applicable"
            },
            "hierarchical": {
              "type": "boolean",
              "title": "Hierarchical",
              "description": "Defines if the Generic support the hierarchical mode.",
              "default": false,
              "update": "validate_constraint"
            },
            "generate_profile": {
              "type": "boolean",
              "title": "Generate Profile",
              "description": "Indicate if a profile schema should be generated for this schema",
              "default": true,
              "update": "validate_constraint"
            },
            "used_by": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Used By",
              "description": "List of Nodes that are referencing this Generic",
              "update": "not_applicable"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "title": "GenericSchema",
          "description": "A Generic can be either an Interface or a Union depending if there are some Attributes or Relationships defined."
        },
        "HTTPValidationError": {
          "properties": {
            "detail": {
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              },
              "type": "array",
              "title": "Detail"
            }
          },
          "type": "object",
          "title": "HTTPValidationError"
        },
        "HashableModelDiff": {
          "properties": {
            "added": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HashableModelDiff"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "object",
              "title": "Added"
            },
            "changed": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HashableModelDiff"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "object",
              "title": "Changed"
            },
            "removed": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HashableModelDiff"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "object",
              "title": "Removed"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "HashableModelDiff"
        },
        "HashableModelState": {
          "type": "string",
          "enum": [
            "present",
            "absent"
          ],
          "title": "HashableModelState"
        },
        "InfoAPI": {
          "properties": {
            "deployment_id": {
              "type": "string",
              "title": "Deployment Id"
            },
            "version": {
              "type": "string",
              "title": "Version"
            }
          },
          "type": "object",
          "required": [
            "deployment_id",
            "version"
          ],
          "title": "InfoAPI"
        },
        "JSONSchema": {
          "properties": {
            "title": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Title",
              "description": "Title of the schema"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Description of the schema"
            },
            "type": {
              "type": "string",
              "title": "Type",
              "description": "Type of the schema element (e.g., 'object', 'array', 'string')"
            },
            "properties": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Properties",
              "description": "Properties of the object if type is 'object'"
            },
            "items": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Items",
              "description": "Items of the array if type is 'array'"
            },
            "required": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Required",
              "description": "List of required properties if type is 'object'"
            },
            "$schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "$Schema",
              "description": "Schema version identifier"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Additionalproperties",
              "description": "Specifies whether additional properties are allowed"
            }
          },
          "type": "object",
          "required": [
            "type"
          ],
          "title": "JSONSchema"
        },
        "LoggingSettings": {
          "properties": {
            "remote": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RemoteLoggingSettings"
                }
              ],
              "default": {
                "enable": false
              }
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "LoggingSettings"
        },
        "MainSettings": {
          "properties": {
            "docs_index_path": {
              "type": "string",
              "title": "Docs Index Path",
              "description": "Full path of saved json containing pre-indexed documentation",
              "default": "/opt/infrahub/docs/build/search-index.json"
            },
            "internal_address": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Internal Address"
            },
            "allow_anonymous_access": {
              "type": "boolean",
              "title": "Allow Anonymous Access",
              "description": "Indicates if the system allows anonymous read access",
              "default": true
            },
            "anonymous_access_role": {
              "type": "string",
              "title": "Anonymous Access Role",
              "description": "Name of the role defining which permissions anonymous users have",
              "default": "Anonymous User"
            },
            "telemetry_optout": {
              "type": "boolean",
              "title": "Telemetry Optout",
              "description": "Disable anonymous usage reporting",
              "default": false
            },
            "telemetry_endpoint": {
              "type": "string",
              "title": "Telemetry Endpoint",
              "default": "https://telemetry.opsmill.cloud/infrahub"
            },
            "permission_backends": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Permission Backends",
              "description": "List of modules to handle permissions, they will be run in the given order",
              "default": [
                "infrahub.permissions.LocalPermissionBackend"
              ]
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "MainSettings"
        },
        "Menu": {
          "properties": {
            "sections": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/components/schemas/MenuItemList"
                },
                "type": "array"
              },
              "type": "object",
              "title": "Sections"
            }
          },
          "type": "object",
          "title": "Menu"
        },
        "MenuItemList": {
          "properties": {
            "identifier": {
              "type": "string",
              "title": "Identifier",
              "description": "Unique identifier for this menu item"
            },
            "label": {
              "type": "string",
              "title": "Label",
              "description": "Title of the menu item"
            },
            "path": {
              "type": "string",
              "title": "Path",
              "description": "URL endpoint if applicable",
              "default": ""
            },
            "icon": {
              "type": "string",
              "title": "Icon",
              "description": "The icon to show for the current view",
              "default": ""
            },
            "kind": {
              "type": "string",
              "title": "Kind",
              "description": "Kind of the model associated with this menuitem if applicable",
              "default": ""
            },
            "order_weight": {
              "type": "integer",
              "title": "Order Weight",
              "default": 5000
            },
            "section": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MenuSection"
                }
              ],
              "default": "object"
            },
            "permissions": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Permissions"
            },
            "children": {
              "items": {
                "$ref": "#/components/schemas/MenuItemList"
              },
              "type": "array",
              "title": "Children",
              "description": "Child objects"
            }
          },
          "type": "object",
          "required": [
            "identifier",
            "label"
          ],
          "title": "MenuItemList"
        },
        "MenuSection": {
          "type": "string",
          "enum": [
            "object",
            "internal"
          ],
          "title": "MenuSection"
        },
        "NodeExtensionSchema": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "default": "present"
            },
            "kind": {
              "type": "string",
              "title": "Kind"
            },
            "attributes": {
              "items": {
                "$ref": "#/components/schemas/AttributeSchema-Input"
              },
              "type": "array",
              "title": "Attributes"
            },
            "relationships": {
              "items": {
                "$ref": "#/components/schemas/RelationshipSchema"
              },
              "type": "array",
              "title": "Relationships"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "kind"
          ],
          "title": "NodeExtensionSchema"
        },
        "NodeSchema": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The ID of the node",
              "update": "not_applicable"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "description": "Expected state of the node/generic after loading the schema",
              "default": "present",
              "update": "not_applicable"
            },
            "name": {
              "type": "string",
              "maxLength": 32,
              "minLength": 2,
              "pattern": "^[A-Z][a-zA-Z0-9]+$",
              "title": "Name",
              "description": "Node name, must be unique within a namespace and must start with an uppercase letter.",
              "update": "migration_required"
            },
            "namespace": {
              "type": "string",
              "maxLength": 32,
              "minLength": 3,
              "pattern": "^[A-Z][a-z0-9]+$",
              "title": "Namespace",
              "description": "Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.",
              "update": "migration_required"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Short description of the model, will be visible in the frontend.",
              "update": "allowed"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 64
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Human friendly representation of the name/kind",
              "update": "allowed"
            },
            "branch": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BranchSupportType"
                }
              ],
              "description": "Type of branch support for the model.",
              "default": "aware",
              "update": "not_supported"
            },
            "default_filter": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-z0-9\\_]+$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Default Filter",
              "description": "Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)",
              "update": "allowed"
            },
            "human_friendly_id": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Human Friendly Id",
              "description": "Human friendly and unique identifier for the object.",
              "update": "allowed"
            },
            "display_labels": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Labels",
              "description": "List of attributes to use to generate the display label",
              "update": "allowed"
            },
            "include_in_menu": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include In Menu",
              "description": "Defines if objects of this kind should be included in the menu.",
              "update": "allowed"
            },
            "menu_placement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Menu Placement",
              "description": "Defines where in the menu this object should be placed.",
              "update": "allowed"
            },
            "icon": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Icon",
              "description": "Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/",
              "update": "allowed"
            },
            "order_by": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order By",
              "description": "List of attributes to use to order the results by default",
              "update": "allowed"
            },
            "uniqueness_constraints": {
              "anyOf": [
                {
                  "items": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Uniqueness Constraints",
              "description": "List of multi-element uniqueness constraints that can combine relationships and attributes",
              "update": "validate_constraint"
            },
            "documentation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Documentation",
              "description": "Link to a documentation associated with this object, can be internal or external.",
              "update": "allowed"
            },
            "attributes": {
              "items": {
                "$ref": "#/components/schemas/AttributeSchema-Input"
              },
              "type": "array",
              "title": "Attributes",
              "description": "Node attributes",
              "update": "not_applicable"
            },
            "relationships": {
              "items": {
                "$ref": "#/components/schemas/RelationshipSchema"
              },
              "type": "array",
              "title": "Relationships",
              "description": "Node Relationships",
              "update": "not_applicable"
            },
            "inherit_from": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Inherit From",
              "description": "List of Generic Kind that this node is inheriting from",
              "update": "validate_constraint"
            },
            "generate_profile": {
              "type": "boolean",
              "title": "Generate Profile",
              "description": "Indicate if a profile schema should be generated for this schema",
              "default": true,
              "update": "validate_constraint"
            },
            "hierarchy": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Hierarchy",
              "description": "Internal value to track the name of the Hierarchy, must match the name of a Generic supporting hierarchical mode",
              "update": "validate_constraint"
            },
            "parent": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Parent",
              "description": "Expected Kind for the parent node in a Hierarchy, default to the main generic defined if not defined.",
              "update": "validate_constraint"
            },
            "children": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Children",
              "description": "Expected Kind for the children nodes in a Hierarchy, default to the main generic defined if not defined.",
              "update": "validate_constraint"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name",
            "namespace"
          ],
          "title": "NodeSchema"
        },
        "PasswordCredential": {
          "properties": {
            "username": {
              "type": "string",
              "title": "Username",
              "description": "Name of the user that is logging in."
            },
            "password": {
              "type": "string",
              "title": "Password",
              "description": "The password of the user."
            }
          },
          "type": "object",
          "required": [
            "username",
            "password"
          ],
          "title": "PasswordCredential"
        },
        "QueryPayload": {
          "properties": {
            "variables": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Variables"
            }
          },
          "type": "object",
          "title": "QueryPayload"
        },
        "RelationshipCardinality": {
          "type": "string",
          "enum": [
            "one",
            "many"
          ],
          "title": "RelationshipCardinality"
        },
        "RelationshipDeleteBehavior": {
          "type": "string",
          "enum": [
            "no-action",
            "cascade"
          ],
          "title": "RelationshipDeleteBehavior"
        },
        "RelationshipDirection": {
          "type": "string",
          "enum": [
            "bidirectional",
            "outbound",
            "inbound"
          ],
          "title": "RelationshipDirection"
        },
        "RelationshipKind": {
          "type": "string",
          "enum": [
            "Generic",
            "Attribute",
            "Component",
            "Parent",
            "Group",
            "Hierarchy",
            "Profile"
          ],
          "title": "RelationshipKind"
        },
        "RelationshipSchema": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The ID of the relationship schema",
              "update": "not_applicable"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "description": "Expected state of the relationship after loading the schema",
              "default": "present",
              "update": "not_applicable"
            },
            "name": {
              "type": "string",
              "maxLength": 32,
              "minLength": 3,
              "pattern": "^[a-z0-9\\_]+$",
              "title": "Name",
              "description": "Relationship name, must be unique within a model and must be all lowercase.",
              "update": "allowed"
            },
            "peer": {
              "type": "string",
              "pattern": "^[A-Z][a-zA-Z0-9]+$",
              "title": "Peer",
              "description": "Type (kind) of objects supported on the other end of the relationship.",
              "update": "validate_constraint"
            },
            "kind": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RelationshipKind"
                }
              ],
              "description": "Defines the type of the relationship.",
              "default": "Generic",
              "update": "allowed"
            },
            "label": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 32
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Human friendly representation of the name. Will be autogenerated if not provided",
              "update": "allowed"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Short description of the relationship.",
              "update": "allowed"
            },
            "identifier": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 128,
                  "pattern": "^[a-z0-9\\_]+$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Identifier",
              "description": "Unique identifier of the relationship within a model, identifiers must match to traverse a relationship on both direction.",
              "update": "allowed"
            },
            "cardinality": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RelationshipCardinality"
                }
              ],
              "description": "Defines how many objects are expected on the other side of the relationship.",
              "default": "many",
              "update": "validate_constraint"
            },
            "min_count": {
              "type": "integer",
              "title": "Min Count",
              "description": "Defines the minimum objects allowed on the other side of the relationship.",
              "default": 0,
              "update": "validate_constraint"
            },
            "max_count": {
              "type": "integer",
              "title": "Max Count",
              "description": "Defines the maximum objects allowed on the other side of the relationship.",
              "default": 0,
              "update": "validate_constraint"
            },
            "order_weight": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Weight",
              "description": "Number used to order the relationship in the frontend (table and view). Lowest value will be ordered first.",
              "update": "allowed"
            },
            "optional": {
              "type": "boolean",
              "title": "Optional",
              "description": "Indicate if this relationship is mandatory or optional.",
              "default": true,
              "update": "validate_constraint"
            },
            "branch": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BranchSupportType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Type of branch support for the relatioinship, if not defined it will be determine based both peers.",
              "update": "not_supported"
            },
            "inherited": {
              "type": "boolean",
              "title": "Inherited",
              "description": "Internal value to indicate if the relationship was inherited from a Generic node.",
              "default": false,
              "update": "not_applicable"
            },
            "direction": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RelationshipDirection"
                }
              ],
              "description": "Defines the direction of the relationship,  Unidirectional relationship are required when the same model is on both side.",
              "default": "bidirectional",
              "update": "not_supported"
            },
            "hierarchical": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Hierarchical",
              "description": "Internal attribute to track the type of hierarchy this relationship is part of, must match a valid Generic Kind",
              "update": "not_supported"
            },
            "on_delete": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RelationshipDeleteBehavior"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Default is no-action. If cascade, related node(s) are deleted when this node is deleted.",
              "update": "allowed"
            },
            "allow_override": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AllowOverrideType"
                }
              ],
              "description": "Type of allowed override for the relationship.",
              "default": "any",
              "update": "allowed"
            },
            "read_only": {
              "type": "boolean",
              "title": "Read Only",
              "description": "Set the relationship as read-only, users won't be able to change its value.",
              "default": false,
              "update": "allowed"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "name",
            "peer"
          ],
          "title": "RelationshipSchema"
        },
        "RemoteLoggingSettings": {
          "properties": {
            "enable": {
              "type": "boolean",
              "title": "Enable",
              "default": false
            },
            "frontend_dsn": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Frontend Dsn"
            },
            "api_server_dsn": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Api Server Dsn"
            },
            "git_agent_dsn": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Git Agent Dsn"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "RemoteLoggingSettings"
        },
        "SSOInfo": {
          "properties": {
            "providers": {
              "items": {
                "$ref": "#/components/schemas/SSOProviderInfo"
              },
              "type": "array",
              "title": "Providers"
            },
            "enabled": {
              "type": "boolean",
              "title": "Enabled",
              "readOnly": true
            }
          },
          "type": "object",
          "required": [
            "enabled"
          ],
          "title": "SSOInfo"
        },
        "SSOProtocol": {
          "type": "string",
          "enum": [
            "oauth2",
            "oidc"
          ],
          "title": "SSOProtocol"
        },
        "SSOProviderInfo": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "display_label": {
              "type": "string",
              "title": "Display Label"
            },
            "icon": {
              "type": "string",
              "title": "Icon"
            },
            "protocol": {
              "$ref": "#/components/schemas/SSOProtocol"
            },
            "authorize_path": {
              "type": "string",
              "title": "Authorize Path",
              "readOnly": true
            },
            "token_path": {
              "type": "string",
              "title": "Token Path",
              "readOnly": true
            }
          },
          "type": "object",
          "required": [
            "name",
            "display_label",
            "icon",
            "protocol",
            "authorize_path",
            "token_path"
          ],
          "title": "SSOProviderInfo"
        },
        "SchemaBranchHash": {
          "properties": {
            "main": {
              "type": "string",
              "title": "Main"
            },
            "nodes": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Nodes"
            },
            "generics": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Generics"
            }
          },
          "type": "object",
          "required": [
            "main"
          ],
          "title": "SchemaBranchHash"
        },
        "SchemaDiff": {
          "properties": {
            "added": {
              "additionalProperties": {
                "$ref": "#/components/schemas/HashableModelDiff"
              },
              "type": "object",
              "title": "Added"
            },
            "changed": {
              "additionalProperties": {
                "$ref": "#/components/schemas/HashableModelDiff"
              },
              "type": "object",
              "title": "Changed"
            },
            "removed": {
              "additionalProperties": {
                "$ref": "#/components/schemas/HashableModelDiff"
              },
              "type": "object",
              "title": "Removed"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "SchemaDiff"
        },
        "SchemaExtension": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/HashableModelState"
                }
              ],
              "default": "present"
            },
            "nodes": {
              "items": {
                "$ref": "#/components/schemas/NodeExtensionSchema"
              },
              "type": "array",
              "title": "Nodes"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "title": "SchemaExtension"
        },
        "SchemaLoadAPI": {
          "properties": {
            "version": {
              "type": "string",
              "title": "Version"
            },
            "generics": {
              "items": {
                "$ref": "#/components/schemas/GenericSchema"
              },
              "type": "array",
              "title": "Generics"
            },
            "nodes": {
              "items": {
                "$ref": "#/components/schemas/NodeSchema"
              },
              "type": "array",
              "title": "Nodes"
            },
            "extensions": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SchemaExtension"
                }
              ],
              "default": {
                "state": "present",
                "nodes": [
                  
                ]
              }
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "version"
          ],
          "title": "SchemaLoadAPI"
        },
        "SchemaNamespace": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "user_editable": {
              "type": "boolean",
              "title": "User Editable"
            }
          },
          "type": "object",
          "required": [
            "name",
            "user_editable"
          ],
          "title": "SchemaNamespace"
        },
        "SchemaReadAPI": {
          "properties": {
            "main": {
              "type": "string",
              "title": "Main",
              "description": "Main hash for the entire schema"
            },
            "nodes": {
              "items": {
                "$ref": "#/components/schemas/APINodeSchema"
              },
              "type": "array",
              "title": "Nodes"
            },
            "generics": {
              "items": {
                "$ref": "#/components/schemas/APIGenericSchema"
              },
              "type": "array",
              "title": "Generics"
            },
            "profiles": {
              "items": {
                "$ref": "#/components/schemas/APIProfileSchema"
              },
              "type": "array",
              "title": "Profiles"
            },
            "namespaces": {
              "items": {
                "$ref": "#/components/schemas/SchemaNamespace"
              },
              "type": "array",
              "title": "Namespaces"
            }
          },
          "type": "object",
          "required": [
            "main"
          ],
          "title": "SchemaReadAPI"
        },
        "SchemaUpdate": {
          "properties": {
            "hash": {
              "type": "string",
              "title": "Hash",
              "description": "The new hash for the entire schema"
            },
            "previous_hash": {
              "type": "string",
              "title": "Previous Hash",
              "description": "The previous hash for the entire schema"
            },
            "diff": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SchemaDiff"
                }
              ],
              "description": "The modifications to the schema"
            },
            "schema_updated": {
              "type": "boolean",
              "title": "Schema Updated",
              "description": "Indicates if the loading of the schema changed the existing schema",
              "readOnly": true
            }
          },
          "type": "object",
          "required": [
            "hash",
            "previous_hash",
            "diff",
            "schema_updated"
          ],
          "title": "SchemaUpdate"
        },
        "SchemasLoadAPI": {
          "properties": {
            "schemas": {
              "items": {
                "$ref": "#/components/schemas/SchemaLoadAPI"
              },
              "type": "array",
              "title": "Schemas"
            }
          },
          "type": "object",
          "required": [
            "schemas"
          ],
          "title": "SchemasLoadAPI"
        },
        "UploadContentPayload": {
          "properties": {
            "content": {
              "type": "string",
              "title": "Content"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "UploadContentPayload"
        },
        "UploadResponse": {
          "properties": {
            "identifier": {
              "type": "string",
              "title": "Identifier"
            },
            "checksum": {
              "type": "string",
              "title": "Checksum"
            }
          },
          "type": "object",
          "required": [
            "identifier",
            "checksum"
          ],
          "title": "UploadResponse"
        },
        "UserToken": {
          "properties": {
            "access_token": {
              "type": "string",
              "title": "Access Token",
              "description": "JWT access_token"
            },
            "refresh_token": {
              "type": "string",
              "title": "Refresh Token",
              "description": "JWT refresh_token"
            }
          },
          "type": "object",
          "required": [
            "access_token",
            "refresh_token"
          ],
          "title": "UserToken"
        },
        "UserTokenWithUrl": {
          "properties": {
            "access_token": {
              "type": "string",
              "title": "Access Token",
              "description": "JWT access_token"
            },
            "refresh_token": {
              "type": "string",
              "title": "Refresh Token",
              "description": "JWT refresh_token"
            },
            "final_url": {
              "type": "string",
              "title": "Final Url",
              "description": "The final url after logged in"
            }
          },
          "type": "object",
          "required": [
            "access_token",
            "refresh_token",
            "final_url"
          ],
          "title": "UserTokenWithUrl"
        },
        "ValidationError": {
          "properties": {
            "loc": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "type": "array",
              "title": "Location"
            },
            "msg": {
              "type": "string",
              "title": "Message"
            },
            "type": {
              "type": "string",
              "title": "Error Type"
            }
          },
          "type": "object",
          "required": [
            "loc",
            "msg",
            "type"
          ],
          "title": "ValidationError"
        }
      },
      "securitySchemes": {
        "HTTPBearer": {
          "type": "http",
          "scheme": "bearer"
        },
        "APIKeyHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-INFRAHUB-KEY"
        }
      }
    }
  }